#labels Featured,Phase-Deploy
#Example of using generic-dao with Spring Framework, JPA and Hibernate

= Introduction =

This example shows how to use generic-dao with Spring Framework and Hibernate.

Things that you need:
* JPA configuration (persistance.xml)
* database configuration (db.properties)
* application context
* entity class
* dao class

= JPA configuration =

First, we create JPA configuration (persistance.xml). In this sample I've used HSQL in-memory database and `your.domain.YourEntityClass` class, which we will create later.

{{{
<?xml version="1.0" encoding="UTF-8"?>
<persistence version="1.0" xmlns="http://java.sun.com/xml/ns/persistence" 
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
             xsi:schemaLocation="http://java.sun.com/xml/ns/persistence              
             http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd">
    <persistence-unit name="generic-dao" transaction-type="RESOURCE_LOCAL">
        <provider>org.hibernate.ejb.HibernatePersistence</provider>
        <class>your.domain.YourEntityClass</class>
        <properties>
            <property name="hibernate.connection.driver_class" value="org.hsqldb.jdbcDriver"/>
            <property name="hibernate.connection.url" value="jdbc:hsqldb:mem:genericdao"/>
            <property name="hibernate.connection.username" value="sa"/>
            <property name="hibernate.connection.password" value=""/>
            <property name="hibernate.dialect" value="org.hibernate.dialect.HSQLDialect"/>      
            <property name="hibernate.cache.provider_class" value="org.hibernate.cache.HashtableCacheProvider"/>
            <property name="hibernate.hbm2ddl.auto" value="update"/>
            <property name="hibernate.show_sql" value="true"/>
            <property name="hibernate.format_sql" value="false"/>
            <property name="hibernate.use_sql_comments" value="false"/>
            <property name="hibernate.query.substitutions" value="true 1, false 0"/>
        </properties>
    </persistence-unit>
</persistence>
}}}

= Database configuration =

Next, we make `db.properties` file, which contains database related configuration.

{{{
db.driver=org.hsqldb.jdbcDriver
db.url=jdbc:hsqldb:mem:genericdao
db.username=sa
db.password=
}}}
 
= Application context =

Third step. In file `applicationContext.xml` we create Spring application configuration.

{{{
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">
}}}

Reading properties from `db.properties`.

{{{    
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:db.properties</value>
        </property>
    </bean>
}}}

Creating data source according to information from `db.properties`.

{{{
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${db.driver}"/>
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
    </bean>
}}}

Creating entity manager factory using ours `persistence.xml` and data source.

{{{    
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceXmlLocation" value="classpath:persistence.xml" />
        <property name="persistenceUnitName" value="generic-dao" />		
        <property name="dataSource" ref="dataSource"/>
    </bean>
}}}

Creating annotated transaction manager. Read more about `@Transaction` annotation in [http://www.springframework.org/docs/reference/transaction.html Spring Reference].  

{{{    
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    <tx:annotation-driven transaction-manager="transactionManager" />
}}}

{{{
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
}}}    

Creating ours dao.

{{{
    <bean id="dao" class="your.domain.YourDaoClass" />
}}}

And that's all :)

{{{    
</beans>
}}} 
 
 
 